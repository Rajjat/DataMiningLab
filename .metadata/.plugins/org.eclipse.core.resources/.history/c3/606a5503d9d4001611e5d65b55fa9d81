package dominated.seq.mining;

import java.io.BufferedReader;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;



import dominated.seq.mining.*;

public class GenesDatabase {
	//private final List<List<Character>> items = new ArrayList<List<Character>>(); 
	private final List<SequenceItemset> sequences = new ArrayList<SequenceItemset>();
//	private final SequenceItemset sequences=null;
	
	public void readFile(String path) throws IOException {
		String currentline;
		BufferedReader myInput = null;
		try {
			FileInputStream fileinput = new FileInputStream(new File(path));
			myInput = new BufferedReader(new InputStreamReader(fileinput));
			int i=1;
			while ((currentline = myInput.readLine()) != null) {
				if (currentline.isEmpty() == false ) {
                // System.out.println(" " +i+ " "+currentline);
                  if(currentline.contains("-"))//considering only negative sequences
                 {
               	  seqAdd(currentline);
                    if(i==771)
                    	break;
				}
                 i++;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (myInput != null) {
				myInput.close();
			}
		}
	}

	void seqAdd(String tokens) { 
		//System.out.println("sequence "+tokens);
		char[] charArray=tokens.toCharArray();
		//List<Character> itemset = new ArrayList<Character>();
		SequenceItemset sequence=new SequenceItemset(sequences.size());
		List<Character> item = new ArrayList<Character>();
		for(int i=0;i<charArray.length;i++)
		{
			if(charArray[i]=='-')
				continue;
			else if(charArray[i]==' ')
				continue;
			else{
			sequence.addItemset(charArray[i]);
			item.add(charArray[i]);
			}
		}
		//sequences.add(sequence.);
		//SequenceItemset sequence = new SequenceItemset(sequences.size());
		//System.out.println("sequence size"+sequence.getItemsets());
		sequences.add(sequence);
		/*                                    for (SequenceItemset sequence1 : sequences){
					sequence1.print();
		}*/
	//	private final List<SequenceItemset> sequences = new ArrayList<SequenceItemset>();
	//	sequences.addItemset(itemset);
		//System.out.println("hi"+sequences.toString());
		//System.out.println("tokens"+tokens);
	//	List<String> itemset = new ArrayList<String>();
		/*char[][] a1 = new char[tokens.length][];
		
		for(int i =0;i<tokens.length;i++){
		    a1[i]=tokens[i].toCharArray();
		    System.out.println("char len"+a1[i].toString()); 
		}

		int total=0;
		for(int i =0;i<tokens.length;i++){
		    total = total + a1[i].length;
		}
		char[] allchar = new char[total];
		int counter = 0; // Counter as the index of your allChar array
		for (int i = 0; i < a1.length; i++) { 
		    for (int j = 0; j < a1[i].length; j++) { // nested for loop - typical 2d array format
		        allchar[counter++] = a1[i][j];
		        System.out.println("char array"+allchar[counter]);// copying it to the new array
		    }
		}*/
		//Character[] a=new Character();
		/*for (int i =0;i<= tokens.length() - 1; i++) {
			if(tokens.charAt(i)=='-')
					{
				    continue;
					}
			else if(tokens.charAt(i)==' ')
			{
				continue;
			}
					
	          a= tokens.charAt(i);
	         }
	    }
			//System.out.println(token);
			/*else if(token.equals("1"))
			{
			   sequence.addItemset(itemset);
		        itemset = new ArrayList<String>();
		//	System.out.println("itemset"+sequence.getItemsets());
			}
			else if(token.equals("3")) { 
				sequences.add(sequence);
				//System.out.println("sequence"+sequences.toString());
			}
			else
			{
			 itemset.add(token);
		   //  System.out.println("each charachter"+itemset);
			}
					
		}	*/	
	}
	public void print() 
	{
	   System.out.println("***SEQUENTIAL DATABASE WITH NEGATIVE CLASS LABEL****");	
	   for (SequenceItemset sequence : sequences) 
	   { 
	     System.out.print(sequence.getId() + ":  ");
	     sequence.print();
	     System.out.println("");
	   }
	}
	public List<SequenceItemset> getSequences() {
		return sequences;
	}
	public int size() {
		return sequences.size();
	}

}

	



